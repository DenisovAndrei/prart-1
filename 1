#include <iostream>
#include <string>
#include <fstream>
#include <ctime>
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable : 4996)
using namespace std;

struct USER { //Структура пользователя
    string Login;
    string Password;
    int Rights = 0;
    int FailedLoginAttempts = 0; // Количество неудачных попыток входа
    bool IsBlocked = false; // Флаг блокировки учетной записи
};

USER U;//Пользователь
/*
* Rights - хранение прав
* 0 бит - чтение файлов
* 1 бит - запись в файл
* 2 бит - создание файлов
* 3 бит удаление файлов
*/
bool Authentication();//Функция аутентификации
void ReadFiles();//Функция чтения
void WriteFiles();//Функция записи
void CreatFiles();//Функция создания файла
void DeleteFiles();//Функция удаления файла
void UserActions();//Функция выбора действия пользователем
void Rights();//Функция переназначения прав
void UnblockUser();//Функция разблокировки
void BlockUser();//Функция блокировки
void AdminAction();//Функция выбора действия администратора

int main()
{
    setlocale(LC_ALL, "");
    char change = '0';
    while (change != '2') {
        cout << "Меню: 1.Аутентификация 2.Выход" << endl;
        change = cin.get();
        if (change == '1') {
            if (Authentication()) {
                if (U.Login == "ADMIN") {
                    AdminAction();
                }
                else {
                    UserActions();
                }
            }
        }
        else if (change != '2')
            cout << "Ошибка: выбрано неверное действие!" << endl;
    }
    return 0;
}

void Book(string text)
{
    time_t now = time(0);
    char* dt = ctime(&now);
    ofstream Book("E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/Book.txt", ios_base::app);
    Book << dt << text << endl << endl;
    Book.close();
}
bool Authentication()
{
    cout << "Аутентификация" << endl;
error1:
    string Correct_Login, Correct_Password;
    cout << "Введите логин пользователя: ";
    cin >> U.Login;
    cout << "Введите пароль: ";
    cin >> U.Password;
    ifstream Data("E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/" + U.Login + ".txt");
    if (Data.is_open()) {
        Data >> Correct_Password;
        if (Correct_Password == U.Password) {
            Data >> U.Rights;
            U.FailedLoginAttempts = 0; // Сброс количества неудачных попыток входа при успешной аутентификации
            if (U.IsBlocked) {
                cout << "Ваша учетная запись заблокирована. Обратитесь к администратору для разблокировки." << endl;
                return false;
            }
            return true;
        }
        else {
            U.FailedLoginAttempts++; // Увеличение количества неудачных попыток входа на 1
            cout << "Ошибка: Введен неверный пароль!" << endl;
            if (U.FailedLoginAttempts >= 3) { // Блокировка учетной записи при достижении 3 неудачных попыток входа
                cout << "Ваша учетная запись заблокирована из-за превышения количества неудачных попыток входа." << endl;
                U.IsBlocked = true;
                ofstream NewFileUser("E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/" + U.Login + ".txt");
                NewFileUser << Correct_Password << endl;
                NewFileUser << U.Rights << endl;
                NewFileUser << U.FailedLoginAttempts << endl;
                NewFileUser << U.IsBlocked << endl;
                NewFileUser.close();
                return false;
            }
            return false;
        }
        Data.close();
    }
    else {
        cout << "Ошибка: Введен неверный логин!" << endl;
        return false;
    }
}
void ReadFiles()//Функция чтения
{
    if (U.Rights & (1 << 0)) {//Проверка права на чтение файлов (0 бит)
        string FName, Line;//Название файла и строка для хранения данных
        cout << "Введите название файла: ";
        cin >> FName;//Ввод названия файла
        ifstream RFile(FName);//Открытие файла
        if (RFile.is_open()) { //Проверка на существование
            cout << "---------------------------------------------" << endl;
            while (getline(RFile, Line)) { //пока есть строки, чтение
                cout << Line << endl;//Вывод строки файла
            }
            cout << "---------------------------------------------" << endl;
            RFile.close();//Закрытие файла
            
        }
        else {
            cout << "Ошибка: Файл <" << FName << "> не найден!" << endl;
        }
    }
    else {
        cout << "Ошибка: У пользователя <" << U.Login << "> отсутствуют права на чтение файлов!" << endl;
    }
}
void WriteFiles()//Функция записи
{
    if (U.Rights & (1 << 1)) {//Проверка права на запись в файл (1 бит)
        string FName, Line;//Название файла и строка для хранения данных
        cout << "Введите название файла: ";
        cin >> FName;//Ввод названия файла
        ofstream WFile(FName, ios_base::app);//Открытие файла для дозаписи
        cout << "Введите текст для записи: ";
        cin >> Line;//Ввод текста
        WFile << Line;//Запись текста
        WFile.close();//Закрытие файла
     
    }
    else {
        cout << "Ошибка: У пользователя <" << U.Login << "> отсутвуют права на запись!" << endl;
    }
}
void CreatFiles()//Функция создания файлов
{
    if (U.Rights & (1 << 2)) {//Проверка права на создание файлов (2 бит)
        string FName;//Название файла
        cout << "Введите название файла: ";
        cin >> FName;
        ofstream NewFile(FName);//Создание пустого файла
        NewFile.close();//Закрытие созданного файла
        cout << "Файл " << FName << " успешно создан!" << endl;
        
    }
    else {
        cout << "Ошибка: У пользователя <" << U.Login << "> отстутствуют права на создание файлов" << endl;
    }
}
void DeleteFiles()
{
    if (U.Rights & (1 << 3)) {//Проверка права на удаление файлов (3 бит)
        cout << "Введите название файла: ";
        string FName;//Строка для названия файла
        cin >> FName;//Ввод названия файла
        remove(FName.c_str());//Удаление файла
        cout << "Файл " << FName << " успешно удален!";
        
    }
    else {
        cout << "Ошибка: У пользователя <" << U.Login << "> отсутствуют права на удаление файла" << endl;
    }
}
void UserActions()
{
    while (true) {
        cout << "Выберите действие (нажмите на нужную цифру, соответствующую действию): " << endl;
        cout << "\t\t1.Чтение файлов\n\t\t2.Запись в файл\n\t\t3.Создание файла\n\t\t4.Удаление файла\n\t\t5.Выход\n";
        char choice = cin.get();
        if (choice == '1')
            ReadFiles();
        else if (choice == '2')
            WriteFiles();
        else if (choice == '3')
            CreatFiles();
        else if (choice == '4')
            DeleteFiles();
        else if (choice == '5')
            break;
        else
            cout << "Ошибка: Выбрано несуществующее действие!" << endl;
    }
}

void Rights()
{
    string User, Password;
    int Rights_ = 0;
    char a = 0;
    cout << "Введите логин пользователя: ";
    cin >> User;
    string path = "E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/" + User + ".txt";
    ifstream FileUser(path);
    if (FileUser.is_open()) {
    metka1:
        cout << "Введите право на чтение (1 - есть, 0 - нет): " << endl;
        a = cin.get();
        if (a == '1')
            Rights_ |= (1 << 0);
        else if (a == '0')
            Rights_ &= ~(1 << 0);
        else {
            cout << "Ошибка: Выбрано неверное действие!" << endl;
            goto metka1;
        }
    metka2:
        cout << "Введите право на запись (1 - есть, 0 - нет): " << endl;
        a = cin.get();
        if (a == '1')
            Rights_ |= (1 << 1);
        else if (a == '0')
            Rights_ &= ~(1 << 1);
        else {
            cout << "Ошибка: Выбрано неверное действие!" << endl;
            goto metka2;
        }
    metka3:
        cout << "Введите право на создание (1 - есть, 0 - нет): " << endl;
        a = cin.get();
        if (a == '1')
            Rights_ |= (1 << 2);
        else if (a == '0')
            Rights_ &= ~(1 << 2);
        else {
            cout << "Ошибка: Выбрано неверное действие!" << endl;
            goto metka3;
        }
    metka4:
        cout << "Введите право на удаление (1 - есть, 0 - нет): " << endl;
        a = cin.get();
        if (a == '1')
            Rights_ |= (1 << 3);
        else if (a == '0')
            Rights_ &= ~(1 << 3);
        else {
            cout << "Ошибка: Выбрано неверное действие!" << endl;
            goto metka4;
        }
        FileUser >> Password;
        FileUser.close();
        remove(path.c_str());
        ofstream NewFileUser(path);
        NewFileUser << Password << endl;
        NewFileUser << Rights_;
        NewFileUser.close();
        cout << "Права пользователю <" << User << "> успешно переназначены" << endl;
        
    }
}
void BlockUser()
{
    string Login;
    cout << "Введите логин пользователя, которого нужно заблокировать: ";
    cin >> Login;
    string path = "E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/" + Login + ".txt";
    ifstream Data(path);
    if (Data.is_open()) {
        Data.close();
        ifstream FileUser(path);
        FileUser >> U.Password;
        FileUser >> U.Rights;
        FileUser >> U.FailedLoginAttempts;
        FileUser.close();
        U.IsBlocked = true;
        ofstream NewFileUser(path);
        NewFileUser << U.Password << endl;
        NewFileUser << U.Rights << endl;
        NewFileUser << U.FailedLoginAttempts << endl;
        NewFileUser << U.IsBlocked << endl;
        NewFileUser.close();
        cout << "Пользователь <" << Login << "> успешно заблокирован!" << endl;
    }
    else {
        cout << "Ошибка: Пользователь <" << Login << "> не найден!" << endl;
    }
}

void UnblockUser()
{
    string Login;
    cout << "Введите логин пользователя, которого нужно разблокировать: ";
    cin >> Login;
    string path = "E:/lab lip/ConsoleApplication1313/ConsoleApplication1313/" + Login + ".txt";
    ifstream Data(path);
    if (Data.is_open()) {
        Data.close();
        ifstream FileUser(path);
        FileUser >> U.Password;
        FileUser >> U.Rights;
        FileUser >> U.FailedLoginAttempts;
        FileUser >> U.IsBlocked;
        FileUser.close();
        U.IsBlocked = false;
        ofstream NewFileUser(path);
        NewFileUser << U.Password << endl;
        NewFileUser << U.Rights << endl;
        NewFileUser << U.FailedLoginAttempts << endl;
        NewFileUser << U.IsBlocked << endl;
        NewFileUser.close();
        cout << "Пользователь <" << Login << "> успешно разблокирован!" << endl;
    }
    else {
        cout << "Ошибка: Пользователь <" << Login << "> не найден!" << endl;
    }
}
void AdminAction()
{
    while (true) {
        cout << "Выберите действие (нажмите на нужную цифру, соответствующую действию): " << endl;
        cout << "\t\t1.Назначение полномочий\n\t\t2.Блокировка пользователя\n\t\t3.Разблокировка пользователя\n\t\t4.Выход\n";
        char choice = cin.get();
        if (choice == '1')
            Rights();
        else if (choice == '2')
            BlockUser();
        else if (choice == '3')
            UnblockUser();
        else if (choice == '4')
            break;
        else
            cout << "Ошибка: Выбрано несуществующее действие!" << endl;
    }
}
